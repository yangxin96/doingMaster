(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{385:function(a,t,s){"use strict";s.r(t);var n=s(7),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("docker搭建gitlab")]),a._v(" "),t("p",[t("em",[t("strong",[t("u",[a._v("重要问题！！！！")])])])]),a._v(" "),t("p",[t("strong",[a._v("1.docker环境")])]),a._v(" "),t("p",[t("strong",[a._v("2.虚拟机内存最少4g以上（内存越大越好），gitlab镜像有2g以上，是一个大型的web项目，内存小启动会报502错误")])]),a._v(" "),t("h2",{attrs:{id:"_1-拉取镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-拉取镜像"}},[a._v("#")]),a._v(" 1.拉取镜像")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker pull gitlab/gitlab-ce\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h2",{attrs:{id:"_2、创建挂载目录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、创建挂载目录"}},[a._v("#")]),a._v(" 2、创建挂载目录")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("mkdir /home/gitlab/data\nmkdir /home/gitlab/config\nmkdir /home/gitlab/logs\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h2",{attrs:{id:"_3、启动镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、启动镜像"}},[a._v("#")]),a._v(" 3、启动镜像")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker run --detach \\\n    --hostname 192.168.88.129 \\\n    --publish 7001:443 --publish 7002:80 --publish 7003:22 \\\n    --name gitlab --restart always \\\n    --volume /home/gitlab/config:/etc/gitlab \\\n    --volume /home/gitlab/logs:/var/log/gitlab \\\n    --volume /home/gitlab/data:/var/opt/gitlab 8e28c88b6a21\n    \ndocker run --detach --hostname 192.168.88.129 --publish 7001:443 --publish 7002:80 --publish 7003:22 --name gitlab --restart always --volume /home/gitlab/config:/etc/gitlab --volume /home/gitlab/logs:/var/log/gitlab --volume /home/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce\n\n 参数名称\t参数说明\ndetach\t指定容器运行于前台还是后台\nhostname\t指定主机地址，如果有域名可以指向域名\npublish\t指定容器暴露的端口,左边的端口代表宿主机的端口，右边的是代表容器的端口\nname\t给容器起一个名字，\nrestart always\t总是重启\nvolume\t数据卷，在docker中是最重要的一个知识点.\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br")])]),t("h2",{attrs:{id:"_4、修改挂载文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、修改挂载文件"}},[a._v("#")]),a._v(" 4、修改挂载文件")]),a._v(" "),t("p",[a._v("按上面的方式，gitlab容器运行没问题，但在gitlab上创建项目的时候，生成项目的URL访问地址是按容器的hostname来生成的，也就是容器的id。作为gitlab服务器，我们需要一个固定的URL访问地址，于是需要配置gitlab.rb（宿主机路径：/home/gitlab/config/gitlab.rb）配置有三个参数如：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("external_url 'http://192.168.88.129'\ngitlab_rails['gitlab_ssh_host'] = '192.168.88.129'\ngitlab_rails['gitlab_shell_ssh_port'] = 7003\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h2",{attrs:{id:"_5、进入容器重置配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、进入容器重置配置"}},[a._v("#")]),a._v(" 5、进入容器重置配置")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('docker exec -it gitlab /bin/bash  进入容器\ngitlab-ctl reconfigure   重置gitlab客户端的命令\n\n[root@publicname ~]# docker exec -it gitlab /bin/bash\nroot@192:/# gitlab-ctl reconfigure\nStarting Chef Infra Client, version 15.14.0\nresolving cookbooks for run list: ["gitlab"]\nSynchronizing Cookbooks:\n  - package (0.1.0)\n  - logrotate (0.1.0)\n  - postgresql (0.1.0)\n  - redis (0.1.0)\n  - monitoring (0.1.0)\n  - registry (0.1.0)\n  - mattermost (0.1.0)\n  - consul (0.1.0)\n  - gitaly (0.1.0)\n  - praefect (0.1.0)\n  - gitlab-kas (0.1.0)\n  - letsencrypt (0.1.0)\n  - nginx (0.1.0)\n  - runit (5.1.3)\n  - acme (4.1.1)\n  - crond (0.1.0)\n  - gitlab-pages (0.1.0)\n  - gitlab (0.0.1)\nInstalling Cookbook Gems:\nCompiling Cookbooks...\n\n出现上面这样的就说明好了，要是闪退和没有上面字符，再试下\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br")])]),t("h2",{attrs:{id:"_6、退出重启镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、退出重启镜像"}},[a._v("#")]),a._v(" 6、退出重启镜像")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("exit\ndocker restart 容器ID\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("h2",{attrs:{id:"_7、浏览器访问gitlab地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、浏览器访问gitlab地址"}},[a._v("#")]),a._v(" 7、浏览器访问gitlab地址")]),a._v(" "),t("p",[a._v("浏览器访问192.168.88.129:7002,要是出现502，等个几分钟，项目启动加载要些时间，30分钟过去了还没好，gitlab部署失败")]),a._v(" "),t("h1",{attrs:{id:"第二种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二种方式"}},[a._v("#")]),a._v(" 第二种方式")]),a._v(" "),t("p",[a._v("1、搜索Gitlab\ndocker search gitlab")]),a._v(" "),t("p",[a._v("2、下载Gitlab\nsudo docker pull gitlab/gitlab-ce:latest")]),a._v(" "),t("p",[a._v("3、查看镜像文件\ndocker images")]),a._v(" "),t("p",[a._v("4、创建Gitlab挂载目录，在/root/docker/gitlab下分别创建config,logs,data目录，如下")]),a._v(" "),t("p",[a._v("5、创建docker中的网络\ndocker network create gitlab_net\n6、使用镜像启动Gitlab容器")]),a._v(" "),t("p",[a._v("启动镜像")]),a._v(" "),t("p",[a._v("docker run --name='gitlab' -d "),t("br"),a._v("\n--net=gitlab_net "),t("br"),a._v("\n--publish 1443:443 --publish 18080:80 "),t("br"),a._v("\n--restart always "),t("br"),a._v("\n--volume /root/docker/gitlab/config:/etc/gitlab "),t("br"),a._v("\n--volume /root/docker/gitlab/logs:/var/log/gitlab "),t("br"),a._v("\n--volume /root/docker/gitlab/data:/var/opt/gitlab "),t("br"),a._v("\ngitlab/gitlab-ce:latest")]),a._v(" "),t("p",[a._v("7、登录Gitlab,IP为宿主机IP地址\nhttp://192.168.121.129:18080\n如果访问上面的地址页面显示502，一般是端口冲突了，需要修改/root/docker/gitlab/config/gitlab.rb文件，重启docker容器即可。\nunicorn['port'] = 8084\n再次访问http://192.168.121.129:18080地址，成功的话需要修改root账号的密码，随意设置即可。密码修改成功后，系统进入登录/注册页面")]),a._v(" "),t("p",[a._v("使用root登录后")]),a._v(" "),t("p",[a._v("配置Gitlab\n刚刚启动Gitlab的时候需要我们输入一个密码，这个密码是管理员用户的密码。我们在登录那里使用root作为用户名，然后用刚刚设置的密码，就可以以管理员身份登录Gitlab。")]),a._v(" "),t("p",[a._v("登录进去之后，点击右上角的齿轮图标，即可进入到管理员页面。在这里我们可以设置很多东西。比如说，默认情况下每个用户只能创建10个仓库，我们可以改变这个设置。在管理员页面点击右面的齿轮，再点击设置，就会进入到系统设置中。然后找到Default projects limit一项，我们给它设个小目标，设它一个亿，这样就相当于无限仓库了。当然如果你实际硬盘满了也就不能在创建更多项目了。")]),a._v(" "),t("p",[a._v("如果这些配置还是不能满足你的需求的时候，还可以直接配置Gitlab。首先进入到Docker环境中。我们使用下面的命令进入Docker环境的bash中。gitlab是刚刚指定的Gitlab名称。")]),a._v(" "),t("p",[a._v("docker exec -it gitlab /bin/bash\n然后就进入了Docker的环境中，我们可以把它当作一个独立的系统来使用。然后编辑/etc/gitlab/gitlab.rb文件，这是Gitlab的全局配置文件。所有选项都可以在这里配置。\n详细的配置方法请看官方文档。\n更新Gitlab\n以后如果需要更新Gitlab版本，首先需要停止并删除当前的Gitlab实例。")]),a._v(" "),t("p",[a._v("docker stop gitlab\ndocker rm gitlab\n然后在使用上次的配置运行Gitlab即可。不用担心数据会丢失。只要你的volume参数指定还和上次一样，Gitlab就会自动读取这些配置。\ndocker run --name='gitlab' -d "),t("br"),a._v("\n--net=gitlab_net "),t("br"),a._v("\n--publish 1443:443 --publish 18080:80 "),t("br"),a._v("\n--restart always "),t("br"),a._v("\n--volume /root/docker/gitlab/config:/etc/gitlab "),t("br"),a._v("\n--volume /root/docker/gitlab/logs:/var/log/gitlab "),t("br"),a._v("\n--volume /root/docker/gitlab/data:/var/opt/gitlab "),t("br"),a._v("\ngitlab/gitlab-ce:latest\n我们在Gitlab的Bash中。依次输入相应的命令，可看到下面的结果")]),a._v(" "),t("p",[a._v("我们看到Gitlab使用了4个开源软件或运行环境：ruby、git、redis和postgresql。如果我们手动安装Gitlab的话，这几个软件也必须分别安装和配置好。这个任务的难度可是非常大的。而且如果需要在多台机器上配置，那么任务量就更大了。但是如果使用Docker的话，我们甚至完全没必要知道这几个软件的存在，简单两条命令即可创建和运行Gitlab。这正是Docker的魅力，难怪现在越来越多的公司在使用Docker。")])])}),[],!1,null,null,null);t.default=e.exports}}]);