(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{382:function(n,t,s){"use strict";s.r(t);var e=s(7),a=Object(e.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h3",{attrs:{id:"nginx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[n._v("#")]),n._v(" Nginx")]),n._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[n._v("1、请求转发，根据端口号后面的请求地址转发\n\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br")])]),t("p",[n._v("Docker 里面的Nginx怎么监听宿主机的端口\n解决\n通过使用Host网络模式来启动Nginx")]),n._v(" "),t("p",[t("strong",[n._v("原因:")]),n._v("\n  如果学了docker容器的网络模式，应该了解docker容器在启动时的一种模式为HOST。在这种模式下。该容器的网络ip和端口都是与宿主机保持一致。\n  这种情况下当docker_nginx监听某一个端口，那就不是监听容器的端口，而是宿主机的端口。\n  例如：当docker_nginx监听8000端口时，向宿主机8000端口访问就会被nginx进行捕获拦截。")]),n._v(" "),t("p",[t("strong",[n._v("命令")])]),n._v(" "),t("p",[n._v("正确:")]),n._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[n._v('docker run --name nginx-test -d --net="host" nginx\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("p",[n._v("错误：")]),n._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[n._v("docker run --name nginx-test -p 8080:80 -d nginx\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("p",[n._v("解析：")]),n._v(" "),t("p",[n._v("错误的命令是给nginx绑定的端口，虽然这样外部可以访问Nginx但是，由于绑定了端口，导致外网只有通过8080才能访问，而nginx始终也只能监听80端口。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("启动nginx，容器，把容器里面的配置文件复制出来，log和html具体地址可以在复制出来的default.conf文件里面看到\n➜  ~ docker cp nginx:/etc/nginx/nginx.conf /xxx/xxx/xxx\n➜  ~ docker cp nginx:/etc/nginx/conf.d/default.conf /xx/xx/xx/default.conf\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br")])]),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("server {\n    listen     89;\n    server_name  localhost;\n\n    location / {\n        root /usr/share/nginx/html; # nginx工作目录是容器的而非宿主机\n        index index.html index.htm;\n}\n}\n\n#配置转发规则,路径转发\nserver {\n\tlisten      9001;                        #监听端口\n\tserver_name  localhost;\t\t\t\t\t  #主机\n\n    location ~ /eduservice/ {\t\t\t\t  #匹配路径\n\t\tproxy_pass  http://localhost:8001;\t  #转发服务器地址\n    }\n\tlocation ~ /eduoss/ {\n\t\tproxy_pass  http://localhost:8002;\n\t}\n\tlocation ~ /eduvod/ {\n\t\tproxy_pass  http://localhost:8003; \n\t}\n\tlocation ~ /cmsservice/ {\n\t\tproxy_pass  http://localhost:8004;\n\t}\n\tlocation ~ /ucenterservice/ {\n\t\tproxy_pass  http://localhost:8006;\n\t}\n\t}\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);